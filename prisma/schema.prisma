// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model UserSettings {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  currency String
  isAdmin  Boolean @default(false)

  createdCategories   Category[]    @relation("CreatedCategories")
  updatedCategories   Category[]    @relation("UpdatedCategories")
  createdTransactions Transaction[] @relation("CreatedTransactions")
  updatedTransactions Transaction[] @relation("UpdatedTransactions")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @default(now())
  updatedBy String

  icon String
  type String @default("income")

  transactions Transaction[]

  creator UserSettings @relation("CreatedCategories", fields: [createdBy], references: [id])
  updater UserSettings @relation("UpdatedCategories", fields: [updatedBy], references: [id])

  @@unique([name, createdBy, type])
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @default(now())
  updatedBy String

  name         String
  amount       Float
  description  String?
  purchaseDate DateTime?
  paymentDate  DateTime
  numerator    Int       @default(1)
  denominator  Int       @default(1)
  type         String    @default("income")

  card String?
  bank String?

  categoryId String
  category   Category                 @relation(fields: [categoryId], references: [id])
  users      TransactionResponsible[]

  creator UserSettings @relation("CreatedTransactions", fields: [createdBy], references: [id])
  updater UserSettings @relation("UpdatedTransactions", fields: [updatedBy], references: [id])
}

model TransactionResponsible {
  responsibleId String
  transactionId String

  responsible Responsible @relation(fields: [responsibleId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@id([responsibleId, transactionId])
}

model Responsible {
  id    String @id @default(uuid())
  name  String
  color String

  TransactionResponsible TransactionResponsible[]
}

model MonthHistory {
  userID  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([day, month, year, userID])
}

model YearHistory {
  userID  String
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([month, year, userID])
}
